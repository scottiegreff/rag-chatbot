
# Table: chat_sessions

## Description
This table stores chat sessions data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **session_id**: VARCHAR(36) (NULL)
- **title**: VARCHAR(255) (NULL)
- **created_at**: TIMESTAMP (NULL)
- **updated_at**: TIMESTAMP (NULL)

## Indexes:
- **ix_chat_sessions_id**: ['id']
- **ix_chat_sessions_session_id**: ['session_id']

## Common Queries for chat_sessions:

### Count records:
```sql
SELECT COUNT(*) FROM chat_sessions;
```

### Get all records (limited):
```sql
SELECT * FROM chat_sessions LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM chat_sessions ORDER BY created_at DESC LIMIT 5;
```



# Table: chat_messages

## Description
This table stores chat messages data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **session_id**: INTEGER (NULL)
- **role**: VARCHAR(10) (NULL)
- **content**: TEXT (NULL)
- **timestamp**: TIMESTAMP (NULL)

## Foreign Key Relationships:
- **['session_id']** → **chat_sessions.['id']**

## Indexes:
- **ix_chat_messages_id**: ['id']

## Common Queries for chat_messages:

### Count records:
```sql
SELECT COUNT(*) FROM chat_messages;
```

### Get all records (limited):
```sql
SELECT * FROM chat_messages LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM chat_messages ORDER BY created_at DESC LIMIT 5;
```



# Table: customers

## Description
This table stores customers data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **first_name**: VARCHAR(50) (NULL)
- **last_name**: VARCHAR(50) (NULL)
- **email**: VARCHAR(100) (NOT NULL)
- **phone**: VARCHAR(20) (NULL)
- **created_at**: TIMESTAMP (NULL)

## Indexes:
- **customers_email_key**: ['email']

## Common Queries for customers:

### Count records:
```sql
SELECT COUNT(*) FROM customers;
```

### Get all records (limited):
```sql
SELECT * FROM customers LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM customers ORDER BY created_at DESC LIMIT 5;
```



# Table: addresses

## Description
This table stores addresses data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **customer_id**: INTEGER (NULL)
- **address_type**: VARCHAR(20) (NULL)
- **street**: VARCHAR(200) (NULL)
- **city**: VARCHAR(100) (NULL)
- **state**: VARCHAR(100) (NULL)
- **zip**: VARCHAR(20) (NULL)
- **country**: VARCHAR(100) (NULL)

## Foreign Key Relationships:
- **['customer_id']** → **customers.['id']**

## Common Queries for addresses:

### Count records:
```sql
SELECT COUNT(*) FROM addresses;
```

### Get all records (limited):
```sql
SELECT * FROM addresses LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM addresses ORDER BY created_at DESC LIMIT 5;
```



# Table: categories

## Description
This table stores categories data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **name**: VARCHAR(100) (NOT NULL)
- **description**: TEXT (NULL)

## Indexes:
- **categories_name_key**: ['name']

## Common Queries for categories:

### Count records:
```sql
SELECT COUNT(*) FROM categories;
```

### Get all records (limited):
```sql
SELECT * FROM categories LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM categories ORDER BY created_at DESC LIMIT 5;
```



# Table: products

## Description
This table stores products data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **name**: VARCHAR(200) (NOT NULL)
- **description**: TEXT (NULL)
- **price**: NUMERIC(10, 2) (NOT NULL)
- **category_id**: INTEGER (NULL)
- **supplier_id**: INTEGER (NULL)
- **sku**: VARCHAR(50) (NULL)
- **created_at**: TIMESTAMP (NULL)

## Foreign Key Relationships:
- **['category_id']** → **categories.['id']**
- **['supplier_id']** → **suppliers.['id']**

## Indexes:
- **products_sku_key**: ['sku']

## Common Queries for products:

### Count records:
```sql
SELECT COUNT(*) FROM products;
```

### Get all records (limited):
```sql
SELECT * FROM products LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM products ORDER BY created_at DESC LIMIT 5;
```



# Table: suppliers

## Description
This table stores suppliers data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **name**: VARCHAR(100) (NULL)
- **contact_email**: VARCHAR(100) (NULL)
- **phone**: VARCHAR(20) (NULL)

## Common Queries for suppliers:

### Count records:
```sql
SELECT COUNT(*) FROM suppliers;
```

### Get all records (limited):
```sql
SELECT * FROM suppliers LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM suppliers ORDER BY created_at DESC LIMIT 5;
```



# Table: product_images

## Description
This table stores product images data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **product_id**: INTEGER (NULL)
- **image_url**: TEXT (NULL)

## Foreign Key Relationships:
- **['product_id']** → **products.['id']**

## Common Queries for product_images:

### Count records:
```sql
SELECT COUNT(*) FROM product_images;
```

### Get all records (limited):
```sql
SELECT * FROM product_images LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM product_images ORDER BY created_at DESC LIMIT 5;
```



# Table: inventory

## Description
This table stores inventory data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **product_id**: INTEGER (NULL)
- **quantity**: INTEGER (NOT NULL)

## Foreign Key Relationships:
- **['product_id']** → **products.['id']**

## Common Queries for inventory:

### Count records:
```sql
SELECT COUNT(*) FROM inventory;
```

### Get all records (limited):
```sql
SELECT * FROM inventory LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM inventory ORDER BY created_at DESC LIMIT 5;
```



# Table: orders

## Description
This table stores orders data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **customer_id**: INTEGER (NULL)
- **order_date**: TIMESTAMP (NULL)
- **status**: VARCHAR(30) (NULL)
- **shipping_address_id**: INTEGER (NULL)
- **billing_address_id**: INTEGER (NULL)
- **total**: NUMERIC(10, 2) (NULL)

## Foreign Key Relationships:
- **['billing_address_id']** → **addresses.['id']**
- **['customer_id']** → **customers.['id']**
- **['shipping_address_id']** → **addresses.['id']**

## Common Queries for orders:

### Count records:
```sql
SELECT COUNT(*) FROM orders;
```

### Get all records (limited):
```sql
SELECT * FROM orders LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM orders ORDER BY created_at DESC LIMIT 5;
```



# Table: order_items

## Description
This table stores order items data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **order_id**: INTEGER (NULL)
- **product_id**: INTEGER (NULL)
- **quantity**: INTEGER (NOT NULL)
- **price**: NUMERIC(10, 2) (NOT NULL)

## Foreign Key Relationships:
- **['order_id']** → **orders.['id']**
- **['product_id']** → **products.['id']**

## Common Queries for order_items:

### Count records:
```sql
SELECT COUNT(*) FROM order_items;
```

### Get all records (limited):
```sql
SELECT * FROM order_items LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM order_items ORDER BY created_at DESC LIMIT 5;
```



# Table: payments

## Description
This table stores payments data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **order_id**: INTEGER (NULL)
- **payment_date**: TIMESTAMP (NULL)
- **amount**: NUMERIC(10, 2) (NOT NULL)
- **payment_method**: VARCHAR(30) (NULL)
- **status**: VARCHAR(30) (NULL)

## Foreign Key Relationships:
- **['order_id']** → **orders.['id']**

## Common Queries for payments:

### Count records:
```sql
SELECT COUNT(*) FROM payments;
```

### Get all records (limited):
```sql
SELECT * FROM payments LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM payments ORDER BY created_at DESC LIMIT 5;
```



# Table: shipping

## Description
This table stores shipping data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **order_id**: INTEGER (NULL)
- **shipped_date**: TIMESTAMP (NULL)
- **delivery_date**: TIMESTAMP (NULL)
- **carrier**: VARCHAR(50) (NULL)
- **tracking_number**: VARCHAR(100) (NULL)
- **status**: VARCHAR(30) (NULL)

## Foreign Key Relationships:
- **['order_id']** → **orders.['id']**

## Common Queries for shipping:

### Count records:
```sql
SELECT COUNT(*) FROM shipping;
```

### Get all records (limited):
```sql
SELECT * FROM shipping LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM shipping ORDER BY created_at DESC LIMIT 5;
```



# Table: cart

## Description
This table stores cart data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **customer_id**: INTEGER (NULL)
- **created_at**: TIMESTAMP (NULL)

## Foreign Key Relationships:
- **['customer_id']** → **customers.['id']**

## Common Queries for cart:

### Count records:
```sql
SELECT COUNT(*) FROM cart;
```

### Get all records (limited):
```sql
SELECT * FROM cart LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM cart ORDER BY created_at DESC LIMIT 5;
```



# Table: cart_items

## Description
This table stores cart items data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **cart_id**: INTEGER (NULL)
- **product_id**: INTEGER (NULL)
- **quantity**: INTEGER (NOT NULL)

## Foreign Key Relationships:
- **['cart_id']** → **cart.['id']**
- **['product_id']** → **products.['id']**

## Common Queries for cart_items:

### Count records:
```sql
SELECT COUNT(*) FROM cart_items;
```

### Get all records (limited):
```sql
SELECT * FROM cart_items LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM cart_items ORDER BY created_at DESC LIMIT 5;
```



# Table: discounts

## Description
This table stores discounts data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **code**: VARCHAR(50) (NOT NULL)
- **description**: TEXT (NULL)
- **discount_percent**: NUMERIC(5, 2) (NULL)
- **valid_from**: TIMESTAMP (NULL)
- **valid_to**: TIMESTAMP (NULL)
- **active**: BOOLEAN (NULL)

## Indexes:
- **discounts_code_key**: ['code']

## Common Queries for discounts:

### Count records:
```sql
SELECT COUNT(*) FROM discounts;
```

### Get all records (limited):
```sql
SELECT * FROM discounts LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM discounts ORDER BY created_at DESC LIMIT 5;
```



# Table: reviews

## Description
This table stores reviews data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **product_id**: INTEGER (NULL)
- **customer_id**: INTEGER (NULL)
- **rating**: INTEGER (NULL)
- **comment**: TEXT (NULL)
- **created_at**: TIMESTAMP (NULL)

## Foreign Key Relationships:
- **['customer_id']** → **customers.['id']**
- **['product_id']** → **products.['id']**

## Common Queries for reviews:

### Count records:
```sql
SELECT COUNT(*) FROM reviews;
```

### Get all records (limited):
```sql
SELECT * FROM reviews LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM reviews ORDER BY created_at DESC LIMIT 5;
```



# Table: wishlists

## Description
This table stores wishlists data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **customer_id**: INTEGER (NULL)
- **created_at**: TIMESTAMP (NULL)

## Foreign Key Relationships:
- **['customer_id']** → **customers.['id']**

## Common Queries for wishlists:

### Count records:
```sql
SELECT COUNT(*) FROM wishlists;
```

### Get all records (limited):
```sql
SELECT * FROM wishlists LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM wishlists ORDER BY created_at DESC LIMIT 5;
```



# Table: wishlist_items

## Description
This table stores wishlist items data in the e-commerce system.

## Columns:
- **id**: INTEGER (NOT NULL)
- **wishlist_id**: INTEGER (NULL)
- **product_id**: INTEGER (NULL)

## Foreign Key Relationships:
- **['product_id']** → **products.['id']**
- **['wishlist_id']** → **wishlists.['id']**

## Common Queries for wishlist_items:

### Count records:
```sql
SELECT COUNT(*) FROM wishlist_items;
```

### Get all records (limited):
```sql
SELECT * FROM wishlist_items LIMIT 10;
```

### Get recent records:
```sql
SELECT * FROM wishlist_items ORDER BY created_at DESC LIMIT 5;
```



# Database Relationships

## Key Relationships in the E-commerce System:

### Customer Relationships:
- **customers** → **addresses** (one-to-many): Customers can have multiple addresses
- **customers** → **orders** (one-to-many): Customers can place multiple orders
- **customers** → **cart** (one-to-one): Each customer has one shopping cart
- **customers** → **wishlists** (one-to-one): Each customer has one wishlist
- **customers** → **reviews** (one-to-many): Customers can write multiple reviews

### Product Relationships:
- **products** → **categories** (many-to-one): Products belong to categories
- **products** → **suppliers** (many-to-one): Products are supplied by suppliers
- **products** → **inventory** (one-to-one): Each product has inventory information
- **products** → **product_images** (one-to-many): Products can have multiple images
- **products** → **order_items** (one-to-many): Products can be in multiple orders
- **products** → **cart_items** (one-to-many): Products can be in multiple carts
- **products** → **wishlist_items** (one-to-many): Products can be in multiple wishlists
- **products** → **reviews** (one-to-many): Products can have multiple reviews

### Order Relationships:
- **orders** → **customers** (many-to-one): Orders belong to customers
- **orders** → **addresses** (many-to-one): Orders have shipping and billing addresses
- **orders** → **order_items** (one-to-many): Orders contain multiple items
- **orders** → **payments** (one-to-many): Orders can have multiple payments
- **orders** → **shipping** (one-to-one): Orders have shipping information

### Shopping Cart Relationships:
- **cart** → **customers** (many-to-one): Carts belong to customers
- **cart** → **cart_items** (one-to-many): Carts contain multiple items
- **cart_items** → **products** (many-to-one): Cart items reference products

### Wishlist Relationships:
- **wishlists** → **customers** (many-to-one): Wishlists belong to customers
- **wishlists** → **wishlist_items** (one-to-many): Wishlists contain multiple items
- **wishlist_items** → **products** (many-to-one): Wishlist items reference products

## Business Logic Relationships:

### Inventory Management:
- Products are linked to inventory to track stock levels
- Order items reduce inventory when orders are placed
- Low inventory can trigger restocking alerts

### Customer Analytics:
- Customer orders are linked to customer profiles
- Order history helps with customer segmentation
- Customer reviews provide product feedback

### Product Management:
- Products are categorized for better organization
- Supplier information helps with procurement
- Product images enhance the shopping experience

### Order Processing:
- Orders go through multiple stages: pending → paid → shipped → delivered
- Payments are tracked separately from orders
- Shipping information includes tracking and delivery dates



# Common Database Query Examples

## Customer Queries:

### Count total customers:
```sql
SELECT COUNT(*) as total_customers FROM customers;
```

### Get customer with highest order value:
```sql
SELECT c.first_name, c.last_name, SUM(o.total) as total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
GROUP BY c.id, c.first_name, c.last_name
ORDER BY total_spent DESC
LIMIT 1;
```

### Get customers from specific state:
```sql
SELECT c.first_name, c.last_name, a.city, a.state
FROM customers c
JOIN addresses a ON c.id = a.customer_id
WHERE a.state = 'CA';
```

## Product Queries:

### Get products by category:
```sql
SELECT p.name, p.price, c.name as category
FROM products p
JOIN categories c ON p.category_id = c.id
WHERE c.name = 'Electronics';
```

### Find products with low inventory:
```sql
SELECT p.name, i.quantity
FROM products p
JOIN inventory i ON p.id = i.product_id
WHERE i.quantity < 10;
```

### Get most expensive products:
```sql
SELECT name, price, sku
FROM products
ORDER BY price DESC
LIMIT 5;
```

## Order Queries:

### Calculate total revenue:
```sql
SELECT SUM(total) as total_revenue FROM orders;
```

### Get average order value:
```sql
SELECT AVG(total) as average_order_value FROM orders;
```

### Find recent orders:
```sql
SELECT o.id, o.total, o.order_date, c.first_name, c.last_name
FROM orders o
JOIN customers c ON o.customer_id = c.id
ORDER BY o.order_date DESC
LIMIT 10;
```

### Get orders by status:
```sql
SELECT COUNT(*) as order_count, status
FROM orders
GROUP BY status;
```

## Sales Analytics:

### Revenue by category:
```sql
SELECT c.name as category, SUM(oi.quantity * oi.price) as revenue
FROM order_items oi
JOIN products p ON oi.product_id = p.id
JOIN categories c ON p.category_id = c.id
GROUP BY c.name
ORDER BY revenue DESC;
```

### Top selling products:
```sql
SELECT p.name, SUM(oi.quantity) as total_sold
FROM order_items oi
JOIN products p ON oi.product_id = p.id
GROUP BY p.id, p.name
ORDER BY total_sold DESC
LIMIT 10;
```

### Customer lifetime value:
```sql
SELECT c.first_name, c.last_name, COUNT(o.id) as order_count, SUM(o.total) as total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
GROUP BY c.id, c.first_name, c.last_name
HAVING COUNT(o.id) > 1
ORDER BY total_spent DESC;
```

## Inventory Management:

### Products out of stock:
```sql
SELECT p.name, i.quantity
FROM products p
JOIN inventory i ON p.id = i.product_id
WHERE i.quantity = 0;
```

### Low stock alerts:
```sql
SELECT p.name, i.quantity, p.price
FROM products p
JOIN inventory i ON p.id = i.product_id
WHERE i.quantity < 5;
```

## Shopping Cart Analysis:

### Abandoned carts:
```sql
SELECT c.id, c.created_at, COUNT(ci.id) as items_in_cart
FROM cart c
JOIN cart_items ci ON c.id = ci.cart_id
WHERE c.created_at < NOW() - INTERVAL '7 days'
GROUP BY c.id, c.created_at;
```

### Cart value analysis:
```sql
SELECT AVG(cart_total) as average_cart_value
FROM (
    SELECT c.id, SUM(ci.quantity * p.price) as cart_total
    FROM cart c
    JOIN cart_items ci ON c.id = ci.cart_id
    JOIN products p ON ci.product_id = p.id
    GROUP BY c.id
) as cart_totals;
```



# Business Rules and Constraints

## Data Integrity Rules:

### Customer Rules:
- Each customer must have a unique email address
- Customer phone numbers are optional
- Customers are created with a timestamp

### Product Rules:
- All products must have a name and price
- Products must belong to a category
- Products must have a unique SKU
- Product prices cannot be negative

### Order Rules:
- Orders must be associated with a customer
- Orders have a status: pending, paid, shipped, delivered
- Order totals are calculated from order items
- Orders can have separate shipping and billing addresses

### Inventory Rules:
- Inventory quantities cannot be negative
- Each product has exactly one inventory record
- Low inventory (quantity < 5) should trigger alerts

### Payment Rules:
- Payments are associated with orders
- Payment amounts should match order totals
- Payment status: pending, completed, failed

### Shipping Rules:
- Shipping is associated with orders
- Tracking numbers are optional
- Delivery dates are estimated

## Business Logic:

### Order Processing:
1. Customer adds items to cart
2. Customer places order (cart becomes order)
3. Payment is processed
4. Order is shipped
5. Order is delivered

### Inventory Management:
- Inventory is reduced when orders are placed
- Low stock triggers restocking alerts
- Products can be discontinued (set quantity to 0)

### Customer Management:
- New customers are created when they first place an order
- Customer addresses are stored for shipping/billing
- Customer preferences are tracked through wishlists

### Product Management:
- Products are organized by categories
- Products have multiple images
- Products are supplied by suppliers
- Product reviews help with quality assessment

## Common Business Questions:

### Revenue Analysis:
- What is our total revenue?
- What is our revenue by category?
- What is our average order value?
- What is our revenue growth over time?

### Customer Analysis:
- How many customers do we have?
- Who are our top customers?
- What is customer lifetime value?
- Where are our customers located?

### Product Analysis:
- What are our best-selling products?
- What products are out of stock?
- What is our inventory value?
- What products have the highest margins?

### Operational Analysis:
- How many orders do we process?
- What is our order fulfillment rate?
- How long does shipping take?
- What is our customer satisfaction rate?
